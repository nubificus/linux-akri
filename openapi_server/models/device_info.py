from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device=None, application=None, version=None):  # noqa: E501
        """DeviceInfo - a model defined in OpenAPI

        :param device: The device of this DeviceInfo.  # noqa: E501
        :type device: str
        :param application: The application of this DeviceInfo.  # noqa: E501
        :type application: str
        :param version: The version of this DeviceInfo.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'device': str,
            'application': str,
            'version': str
        }

        self.attribute_map = {
            'device': 'device',
            'application': 'application',
            'version': 'version'
        }

        self._device = device
        self._application = application
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceInfo of this DeviceInfo.  # noqa: E501
        :rtype: DeviceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self) -> str:
        """Gets the device of this DeviceInfo.


        :return: The device of this DeviceInfo.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device: str):
        """Sets the device of this DeviceInfo.


        :param device: The device of this DeviceInfo.
        :type device: str
        """

        self._device = device

    @property
    def application(self) -> str:
        """Gets the application of this DeviceInfo.


        :return: The application of this DeviceInfo.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application: str):
        """Sets the application of this DeviceInfo.


        :param application: The application of this DeviceInfo.
        :type application: str
        """

        self._application = application

    @property
    def version(self) -> str:
        """Gets the version of this DeviceInfo.


        :return: The version of this DeviceInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this DeviceInfo.


        :param version: The version of this DeviceInfo.
        :type version: str
        """

        self._version = version
